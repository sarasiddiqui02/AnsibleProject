---

- name: Provision AWS VPC network # Start AWS VPC network setup #
  hosts: localhost
  gather_facts: no

  vars:
    region: us-east-1
    postgres_password: "password123"  # Set your custom password here
    db_user: testuser
    db_name: nhl_players
    db_password: password123
    my_key_pair: project7_key

  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: Project7VPC
        cidr_block: 10.0.0.0/16
        region: us-east-1
        state: present
      register: vpc_net

    - name: Create Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc_net.vpc.id }}"
        region: us-east-1
        state: present
        tags:
          Name: P7 IGW
      register: igw

    - name: Create Public Subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_net.vpc.id }}"
        cidr: 10.0.1.0/24
        region: us-east-1
        state: present
        map_public: yes
        tags:
          Name: P7 Public Subnet 1
      register: public_subnet1

    - name: Create Public Subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_net.vpc.id }}"
        cidr: 10.0.2.0/24
        region: us-east-1
        state: present
        map_public: yes
        tags:
          Name: P7 Public Subnet 2
      register: public_subnet2

    - name: Create Private Subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_net.vpc.id }}"
        cidr: 10.0.10.0/24
        region: us-east-1
        state: present
        tags:
          Name: P7 Private Subnet 1
      register: private_subnet1

    - name: Create Private Subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc_net.vpc.id }}"
        cidr: 10.0.11.0/24
        region: us-east-1
        state: present
        tags:
          Name: P7 Private Subnet 2
      register: private_subnet2

    # - name: Save Private Subnet ID as Fact
    #   set_fact:
    #     private_subnet_id: "{{ private_subnet.subnet.id }}"  

    - name: Create Public Route Table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc_net.vpc.id }}"
        region: us-east-1
        state: present
        subnets:
          - "{{ public_subnet1.subnet.id }}"
          - "{{ public_subnet2.subnet.id }}"
          - "{{ private_subnet1.subnet.id }}"
          - "{{ private_subnet2.subnet.id }}"
        tags:
          Name: P7 PublicRouteTable
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table

    - name: Create Security Group for Database Server
      ec2_group:
        name: DB_SG
        description: Security Group for Database Server
        vpc_id: "{{ vpc_net.vpc.id }}"
        region: us-east-1
        state: present
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip: 10.0.0.0/24 
      register: db_sec_group

    - name: Create API Security Group
      ec2_group:
        name: API_SG
        description: Security group for API servers
        vpc_id: "{{ vpc_net.vpc.id }}"
        region: us-east-1
        state: present
        rules:
          - proto: tcp
            from_port: 80 # Assuming your API listens on port 80 for HTTP traffic
            to_port: 80
            cidr_ip: 0.0.0.0/0 # Allow traffic from any public IP (Internet)
          - proto: tcp
            from_port: 5432 # Assuming your database listens on port 5432(Postgres)
            to_port: 5432
            group_id: "{{db_sec_group.group_id}}"
          - proto: tcp
            from_port: 22 # Assuming your API listens on port 80 for HTTP traffic
            to_port: 22
            cidr_ip: 0.0.0.0/0 # Allow traffic from any public IP (Internet)
      register: api_sec_group
# End AWS VPC network setup #


# Start API server setup

- name: Configure API Server 
  hosts: localhost
  gather_facts: no
  become: true

  vars:
    region: us-east-1
    postgres_password: "password123"  # Set your custom password here
    my_key_pair: project7_key
    api_ec2_name: api_ec2
 
  tasks:

    - name: create a new EC2 key pair, returns generated private key
      ec2_key:
        name: "{{ my_key_pair}}"
        region: "{{ region }}" 
      register: key_pair_info
      
    - name: Save Private Key Locally
      copy:
        content: "{{ key_pair_info.key.private_key }}"
        dest: "{{ playbook_dir }}/{{ my_key_pair }}.pem"
        mode: '0600'

    - name: Create and Launch API EC2 Instance in public subnet 1
      ec2_instance:
        # ec2_region: "{{ region }}"
        name: "{{ api_ec2_name }}"
        key_name: "{{ my_key_pair}}"
        instance_type: t2.micro
        image_id: "ami-053b0d53c279acc90"  # Replace with the appropriate Ubuntu 22.04 AMI ID
        subnet_id: "{{ public_subnet1.subnet.id }}"
        security_group: "{{ api_sec_group.group_id }}"
        # assign_public_ip: false
        state: present
        tags:
          Name: "APIEC2Instance"
        user_data: "{{ lookup('file', 'cloud_config.yml') }}"  # Specify the path to your user data script 
      register: api_ec2_instance

# End API server setup
 

# Start Database server setup

- name: Configure Database Server and Application
  hosts: localhost
  gather_facts: no
  become: true

  vars:
    region: us-east-1
    postgres_password: "password123"  # Set your custom password here
    my_key_pair: project7_key
    db_user: testuser
    db_name: nhl_players
    db_password: password123
    db_ec2_name: db_ec2
 
  tasks:

    - name: Create and Launch DB EC2 Instance in Private Subnet 1
      ec2_instance:
        # ec2_region: "{{ region }}"
        name: "{{ db_ec2_name }}"
        key_name: "{{ my_key_pair}}"
        instance_type: t2.micro
        image_id: "ami-053b0d53c279acc90"  # Replace with the appropriate Ubuntu 22.04 AMI ID
        subnet_id: "{{ private_subnet1.subnet.id }}"
        security_group: "{{ db_sec_group.group_id }}"
        # assign_public_ip: false
        state: present
        tags:
          Name: "DBEC2Instance"
        user_data: "{{ lookup('file', 'db_cloud_config.yml') }}"  # Specify the path to your user data script
      register: db_ec2_instance

    

    # - name: Debug ec2_instance variable
    #   debug:
    #     var: ec2_instance

  # End Database server setup


    

